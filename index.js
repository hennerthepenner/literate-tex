// Generated by CoffeeScript 1.6.3
(function() {
  var Kckr, TexRenderer, bin, convert, fs, kickoff, log, marked, node, opts, path, precompile, sourceBaseDir, texBaseDir, watcher, _ref;

  _ref = process.argv, node = _ref[0], bin = _ref[1], sourceBaseDir = _ref[2], texBaseDir = _ref[3];

  if (!sourceBaseDir || !texBaseDir) {
    console.log("Usage: literate-tex <inputDirectory> <outputDirectory>");
    return;
  }

  path = require("path");

  precompile = function(sourceFile, sourceBaseDir) {
    var basename, relDir, sourceDir, sourceExt, sourceFilename, texDir, texFile, texFilename;
    sourceDir = path.dirname(sourceFile);
    relDir = path.relative(sourceBaseDir, sourceDir);
    texDir = path.join(texBaseDir, relDir);
    sourceFilename = path.basename(sourceFile);
    sourceExt = path.extname(sourceFilename);
    basename = path.basename(sourceFilename, sourceExt);
    texFilename = basename + ".tex";
    texFile = path.join(texBaseDir, relDir, texFilename);
    convert(sourceFile, texFile, sourceExt);
    return log(relDir, sourceFilename);
  };

  log = function(relDir, filename) {
    var hour, min, now, prepend, sec;
    now = new Date();
    prepend = function(num) {
      if (num < 10) {
        return "0" + num;
      } else {
        return "" + num;
      }
    };
    hour = prepend(now.getHours());
    min = prepend(now.getMinutes());
    sec = prepend(now.getSeconds());
    return console.log("" + hour + ":" + min + ":" + sec + " - precompiled " + relDir + "/" + filename);
  };

  fs = require("fs");

  marked = require("marked");

  TexRenderer = require("marked-texrenderer");

  convert = function(sourceFile, texFile, ext) {
    var literate, opts, rendered;
    literate = fs.readFileSync(sourceFile, {
      encoding: "utf8"
    });
    opts = {
      renderer: new TexRenderer(),
      defaultLanguage: "coffeescript",
      packageOptions: "[H]"
    };
    rendered = marked(literate, opts);
    return fs.writeFileSync(texFile, rendered);
  };

  Kckr = require("kckr").Kckr;

  opts = {
    sources: [sourceBaseDir],
    callback: precompile,
    verbose: false,
    pattern: /.litcoffee|.md/,
    kickonce: true
  };

  kickoff = new Kckr(opts);

  opts.kickonce = false;

  watcher = new Kckr(opts);

}).call(this);
