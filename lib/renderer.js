// Generated by CoffeeScript 1.6.3
(function() {
  var Renderer;

  module.exports = Renderer = (function() {
    function Renderer(options) {
      this.options = options || {};
    }

    Renderer.prototype.em = function(text) {
      return "\\textit{" + text + "}";
    };

    Renderer.prototype.strong = function(text) {
      return "\\textbf{" + text + "}";
    };

    Renderer.prototype.codespan = function(text) {
      return "\\texttt{" + text + "}";
    };

    Renderer.prototype.br = function(text) {
      return "" + text + "\n";
    };

    Renderer.prototype.del = function(text) {
      return text;
    };

    Renderer.prototype.link = function(href, title, text) {
      return "\\url{" + href + "}";
    };

    Renderer.prototype.image = function(href, title, text) {
      return "";
    };

    Renderer.prototype.code = function(code, language) {
      var highlighted, lines, _base, _base1, _base2, _base3, _base4, _base5, _base6;
      if ((_base = this.options).packageName == null) {
        _base.packageName = "listing";
      }
      if ((_base1 = this.options).packageOptions == null) {
        _base1.packageOptions = "";
      }
      if ((_base2 = this.options).resetLineNumbers == null) {
        _base2.resetLineNumbers = true;
      }
      if ((_base3 = this.options).minted == null) {
        _base3.minted = {};
      }
      if ((_base4 = this.options.minted).linenos == null) {
        _base4.linenos = true;
      }
      if ((_base5 = this.options.minted).bgcolor == null) {
        _base5.bgcolor = "codebg";
      }
      if (this.options.resetLineNumbers === true) {
        this.options.minted.firstnumber = 1;
      } else {
        if ((_base6 = this.options.minted).firstnumber == null) {
          _base6.firstnumber = 1;
        }
      }
      if ("highlight" in this.options && typeof this.options.highlight === "function") {
        highlighted = this.options.highlight.call(this, code, language);
      } else {
        highlighted = this.defaultHighlighting(code, language);
      }
      if (highlighted == null) {
        highlighted = code;
      }
      if (this.options.resetLineNumbers === false) {
        lines = code.split(/\r\n|\r|\n/);
        this.options.minted.firstnumber += lines.length;
      }
      return "\\begin{" + this.options.packageName + "}" + "\n" + highlighted + "\n\\end{" + this.options.packageName + "}\n\n";
    };

    Renderer.prototype.defaultHighlighting = function(code, language) {
      var mintedOpts, mintedOptsStr, optName, optValue, _ref;
      mintedOpts = [];
      _ref = this.options.minted;
      for (optName in _ref) {
        optValue = _ref[optName];
        if (optValue === true) {
          mintedOpts.push(optName);
        } else {
          mintedOpts.push(optName + "=" + optValue);
        }
      }
      mintedOptsStr = "[" + mintedOpts.join(",") + "]";
      if (language == null) {
        language = this.options.defaultLanguage || "text";
      }
      return "\\begin{minted}" + mintedOptsStr + "{" + language + "}\n" + code + "\n\\end{minted}";
    };

    Renderer.prototype.paragraph = function(text) {
      return "" + text + "\n\n";
    };

    Renderer.prototype.html = function(html) {
      return html;
    };

    Renderer.prototype.heading = function(text, level) {
      var headingMap;
      if (level < 1 || level > 5) {
        return "" + text + "\n\n";
      }
      headingMap = ["\\section{" + text + "}", "\\subsection{" + text + "}", "\\subsubsection{" + text + "}", "\\paragraph{" + text + "}", "\\subparagraph{" + text + "}"];
      return headingMap[level - 1] + "\n\n";
    };

    Renderer.prototype.hr = function() {
      return "\\pagebreak\n\n";
    };

    Renderer.prototype.list = function(body, ordered) {
      if (ordered) {
        return "\\begin{enumerate}\n" + body + "\\end{enumerate}\n\n";
      } else {
        return "\\begin{itemize}\n" + body + "\\end{itemize}\n\n";
      }
    };

    Renderer.prototype.listitem = function(text) {
      return "\\item " + text + "\n";
    };

    Renderer.prototype.table = function(header, body) {
      return "" + header + body + "\n\n";
    };

    Renderer.prototype.tablerow = function(content) {
      return content;
    };

    Renderer.prototype.tablecell = function(content, flags) {
      return content;
    };

    return Renderer;

  })();

}).call(this);
